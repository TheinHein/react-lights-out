{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","fonts/neon/neon.ttf","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAround","coord","classes","isLit","className","onClick","Component","Board","state","board","createBoard","hasWon","Array","from","length","ncols","map","ele","nrows","Math","random","chanceLightStartsOn","split","Number","y","x","flipCell","total","includes","setState","isPlaying","i","j","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a183d189.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Cell.css\";\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(evt) {\n    this.props.flipCellsAround(this.props.coord);\n  }\n  render() {\n    let classes = \"Cell \" + (this.props.isLit ? \"Cell-lit\" : \"\");\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\nexport default Cell;\n","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 3,\n    ncols: 3,\n    chanceLightStartsOn: 50, // ? 50% probability of light starts on\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: this.createBoard(),\n      hasWon: false,\n    };\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  createBoard() {\n    let board = [];\n\n    board = Array.from({ length: this.props.ncols }).map((ele) =>\n      Array.from({ length: this.props.nrows }).map(\n        (ele) => Math.random() < this.props.chanceLightStartsOn / 100\n      )\n    );\n\n    return board;\n  }\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    // 0[0,1,2] 00 01 02\n    // 1[0,1,2] 10 11 12\n    // 2[0,1,2] 20 21 22\n    let total = 0;\n    for (let arr of board) {\n      if (arr.includes(true)) {\n        total += 1;\n      }\n    }\n\n    this.setState({ board }, () => {\n      if (total === 0) {\n        this.setState({ hasWon: true });\n      } else {\n        this.setState({ hasWon: false });\n      }\n    });\n  }\n\n  render() {\n    const isPlaying = !this.state.hasWon;\n    const hasWon = this.state.hasWon;\n    return (\n      <div className=\"Board\">\n        {isPlaying && (\n          <div className=\"Board-section\">\n            <div className=\"Board-title\">\n              <p>\n                <span className=\"Board-neonText1\">Light </span>\n                <span className=\"Board-neonText2\">Out</span>\n              </p>\n            </div>\n            <table>\n              <tbody>\n                {this.state.board.map((ele, i) => (\n                  <tr key={i}>\n                    {this.state.board[i].map((ele, j) => (\n                      <Cell\n                        isLit={this.state.board[i][j]}\n                        key={`${i}-${j}`}\n                        flipCellsAround={this.flipCellsAround}\n                        coord={`${i}-${j}`}\n                      />\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n        {hasWon && (\n          <div className=\"Board-section\">\n            <p className=\"Board-win\">YOU WIN!!!</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default Board;\n","import \"./App.css\";\nimport Board from \"./Board\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/neon.3cdac083.ttf\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./fonts/neon/neon.ttf\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}